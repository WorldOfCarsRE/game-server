from game.cars.distributed import CarsDistrict/AI
from game.cars.carplayer import DistributedCarPlayer/AI
from game.cars.carplayer import DistributedCarGM/AI
from game.cars.carplayer import DistributedCarPuppet/AI
from game.cars.carplayer import DistributedRaceCar/AI
from game.cars.zone import DistributedZone/AI
from game.cars.carplayer import InteractiveObject/AI
from game.cars.racing import DistributedSinglePlayerRacingLobby/AI
from game.cars.racing import DistributedSinglePlayerRacingLobbyContext/AI
from game.cars.racing import DistributedSPRace/AI
from game.cars.uberdog import HolidayManagerUD
from game.cars.uberdog import ShardManagerUD
from game.cars.lobby import DistributedTutorialLobbyUD
from game.cars.lobby import DistributedTutorialLobbyContextUD
from game.cars.racing import DistributedFriendsLobby/AI
from game.cars.racing import DistributedCrossShardLobby/AI
from game.cars.racing import DistributedCrossShardLobbyContext/AI
from game.cars.racing import DistributedMPRace/AI
from game.cars.dungeon import DistributedDungeon/AI
from game.cars.dungeon import DistributedYard/AI

// cars start at struct 45 and field 331

// This keyword will help CarsClient filter the owner
// generate message into the one that the client expects.
keyword ownrequired;

// struct 45
dclass unk_45 {
};

// struct 46
dclass CarsDistrict : DistributedDistrict {
    setParentingRules(string, string) broadcast ram; // 331
    setServerTime(uint32) clsend;
    unk_333();
    setEnabled(uint8) required broadcast; // 334
};

// struct 47
dclass DungeonDistrict : CarsDistrict {
    // unknown fields could be in CarsDistrict!
    unk_335();
    unk_336();
    unk_337();
    unk_338();
};

// struct 48
struct ShardStatus {
    uint32 doid;
    string name;
    uint8 populationLevel;
    uint16 avatarCount;
    uint8 active;
};

// struct 49
dclass ShardManager {
    // field 344 (ok)
    setParentingRules() broadcast ram;
    unk_345();
    getYardRequest(int32) clsend airecv;
    getYardResponse(int32, int32);

    // These fields are unused on the client, so it's assumed these are
    // used internally.
    registerShard(uint32 shardId, string shardName) airecv;
    updateShard(uint16 avatarCount, uint8 active) airecv;
    deleteShard() airecv;
    unk_351();
    unk_352();
    unk_353();
    unk_354();
    unk_355();
    unk_356();
    getAllShardsRequest(int32) clsend airecv;
    getAllShardsResponse(int32, ShardStatus[]);
    getShardRequest(int32, int32) clsend airecv;
    getShardResponse(int32, ShardStatus);
};

// struct 50
dclass DistributedLobby {
    setParentingRules(string, string) broadcast ram; // 361
    setDungeonItemId(int32) required broadcast;
    setHotSpotName(string) required broadcast;
    gotoLobbyContext(int32);
    joinFail(int32);
    join() clsend airecv;
    quit() clsend airecv;
};

// struct 51
dclass unk_51 {
};

// struct 52
dclass DistributedCrossShardLobby : DistributedLobby {
};

// struct 53
dclass DistributedFriendsLobby : DistributedLobby {
    inviteFriendRequest(int32 friendId) clsend airecv; // 368
    friendResponse(int32 friendId, int8 response);
    inviteResponse(int8 response) clsend airecv;
};

// struct 54
dclass DistributedSinglePlayerRacingLobby : DistributedLobby {
};

// struct 55
dclass DistributedTutorialLobby : DistributedLobby {
};

// struct 56
dclass DistributedLobbyContext {
    setPlayersInDungeon(int32[] players) required broadcast; // 371
    setPlayersInContext(int32[] players) required broadcast;
    setOwner(int32 ownerId) required broadcast;
    gotoDungeon(int32 destinationShard, int32 destinationZone) required broadcast;
    setPlayerJoin(int32 playerId) broadcast;
    setPlayerQuit(int32 playerId) broadcast; // 376
};

// struct 57
dclass unk_57 {
    // might be in DistributedCrossShardLobbyContext
    //          or DistributedLobbyContext
    unk_377();
};

// struct 58
dclass DistributedCrossShardLobbyContext : DistributedLobbyContext {
    // field 378 (ok)
    setTimeLeft(int8 timeLeft) required broadcast;
};

// struct 59
dclass DistributedFriendsLobbyContext : DistributedLobbyContext {
    setTimeLeft(int8 timeLeft) required broadcast; // 379
    setPlayersGearingUp(int32[]) required broadcast;
    setPlayersWaitingForReply(int32[]) required broadcast;
    setPlayerGearingUp(int32);
    setPlayerWaitingForReply(int32);
    setGearUpTimeLeft(int8);
    startRace() clsend clrecv;
};

// struct 60
dclass DistributedSinglePlayerRacingLobbyContext : DistributedLobbyContext {
};

// struct 61
dclass DistributedTutorialLobbyContext : DistributedLobbyContext {
};

// struct 62
dclass CarMgr {
    setParentingRules(string, string); // 386

    // might be in Persistent
    unk_387();
    unk_388();
};

// struct 63
dclass Persistent {
    // field 389 (ok)
    persistRequest(int32) clsend airecv;
    persistResponse(int32, int8); // 390
};

// struct 64
struct Addon {
    int32 itemId;
    uint32 deformX;
    uint32 deformY;
    uint32 deformZ;
};

// struct 65
struct Consumable {
    int32 itemId;
    uint16 quantity;
};

// struct 66
struct CarDNA {
    string carName;
    int16 carNumber;
    int32 logoBackgroundId;
    int32 logoBackgroundColor;
    int16 logoFontId;
    int32 logoFontColor;
    int8 gender;
    int16 careerType;
    int32 chassis;
    int32 color;
    int32 eyeColor;
    int32 wheel;
    int32 tire;
    int32 detailing;
    int32 profileBackgroundId;
    int16[] stretches;
    int32[] decalSlots;
    Addon[] onAddons;
    int32 costumeId;
};

// struct 67
struct RuleState {
    int32 ruleId;
    int32 count;
    int32 accumulator;
    uint32 createTime;
};

// struct 68
dclass DistributedCareerCar {
    // field 420 (ok)
    setCareerType(int16) ownrequired ownrecv;
    setPoints(uint32) ownrequired ownrecv;
    setOnAddons(Addon[]) ownrequired ownrecv;
    setOffAddons(Addon[]) ownrequired ownrecv;
    setConsumables(Consumable[]) ownrequired ownrecv;
    modifyAddon(int32[], int32[]) ownsend;
    deformAddons(Addon[]) ownsend;
    consume(Consumable) ownsend;
};

// struct 69
dclass DistributedRaceCar : Persistent {
    setMiles(uint32 = 0) ownrequired db ownrecv; // 428
    setRacingPoints(uint32 = 0) ownrequired db ownrecv;
    setConsumableSlot(uint16 = 0) ownrequired db ownrecv;
    setConsumableStack(uint16 = 0) ownrequired db ownrecv;
    setDashboardTexture(int32 = 0) ownrequired db ownrecv;
    setRaceSeries(int32 = 44000) ownrequired db ownrecv;
    setActiveSponsor(int32 = 0) ownrequired db ownrecv;
    setActiveGear(int32 = 1) ownrequired db ownrecv;
    setDNA(CarDNA) ownrequired db ownrecv;
    setOffAddons(Addon[] = []) ownrequired db ownrecv;
    setConsumables(Consumable[] = []) ownrequired db ownrecv;
    setPaints(int32[] = []) ownrequired db ownrecv;
    setEyeColors(int32[] = []) ownrequired db ownrecv;
    setDecals(int32[] = []) ownrequired db ownrecv;
    setWheels(int32[] = []) ownrequired db ownrecv;
    setTires(int32[] = []) ownrequired db ownrecv;
    setDetailings(int32[] = []) ownrequired broadcast db ownrecv;
    setAnimations(int32[] = []) ownrequired db ownrecv;
    setTrophies(int32[] = []) ownrequired db ownrecv;
    setDashboardTextures(int32[] = []) ownrequired db ownrecv;
    setProfileBackgrounds(int32[] = []) ownrequired db ownrecv;
    setPrintableBackgrounds(int32[] = []) ownrequired db ownrecv;
    setGears(int32[] = [1]) ownrequired db ownrecv;
    setCostumes(int32[] = []) ownrequired db ownrecv;
    modifyActiveSponsor(int32) ownsend;
    modifyDNA(string, int16, int32, int32, int16, int32, int8, int32, int32, int32, int32, int32, int32, int32, int32, int16[], int32[]) ownsend;
    modifyAddon(int32[], int32[]) ownsend;
    modifyAllDNA(string, int16, int32, int32, int16, int32, int8, int32, int32, int32, int32, int32, int32, int32, int32, int16[], int32[], int32[], int32[]) ownsend;
    modifyActiveGear(int32) ownsend;
    deformAddons(Addon[]) ownsend;
    consume(Consumable) ownsend;
    setDashboardTextureRequest(int32) ownsend;
};

// struct 70
dclass DistributedCarAvatar : TalkPath_owner, TalkPath_whisper {
    setTelemetry(int16 = 0, int16 = 0, int16 = 0, int16 = 0, int16 = 0, int16 = 0, int16 = 0, int32 = 0) required ownrequired broadcast ownsend airecv; // 460
    setPhysics(int32[] = [], int32[] = [], int32[] = [], int32[] = [], int32[] = []) required ownrequired broadcast ownsend;
    setState(uint32 = 0) required ownrequired broadcast ownsend;
};

// struct 71
dclass DistributedRacer {
    // !! type clash (uint8 or int8?)
    setLap(uint8) clsend clrecv; // 463
};

// struct 72
struct AnimationChoreography {
    int32 animationId;
    uint16 iterations;
};

// struct 73
struct Choreography {
    int32 catalogId;
    uint16 duration;
};

// struct 74
struct Reward {
    int32 type;
    int32 itemId;
    int32 quantity;
    int32 reasonId;
};

// struct 75
struct Stock {
    int32 catalogItemId;
    int32 quantity;
    int32 usedQuantity;
};

// struct 76
struct Dialog {
    int32 dialogId;
    string args[];
};

// struct 77
dclass CarPlayerStatus {
    // field 477 (ok)
    setLocationType(int16 = 0) required broadcast ownrequired db ownrecv ownsend;
    // !! uint8/int8 type clash
    setPrivacySettings(uint8 = 0) required broadcast ownrequired db ownrecv ownsend;
    hi();
};

// struct 78
dclass DistributedCarPlayer : DistributedCarAvatar, DistributedRacer, Persistent {
    setDNA(CarDNA) required ownrequired broadcast db ownrecv; // 480
    setCarCoins(uint32 = 0) ownrequired broadcast db ownrecv;
    setCars(int32 = 0, int32[] = []) ownrequired broadcast db ownrecv ram;
    setBadges(int32[] = []) ownrequired broadcast db ownrecv;
    setYardStocks(Stock[] = []) ownrequired broadcast db ownrecv;
    setRuleStates(RuleState[]);
    deleteRuleStates(int32[]);
    setCurrentCar(int32);
    buyItemRequest(int32 shopId, int32 itemId) ownsend airecv;
    buyItemResponse(int32 itemId, int8 responseCode);
    invokeRuleRequest(int32, int32[], int32) ownsend airecv;
    invokeRuleResponse(int32, int32[], int32);
    teleportRequest(uint32) clsend ownrecv;
    teleportResponseToZone(uint32, uint32, uint32, int32, int32) clsend ownrecv;
    teleportResponseUnavailable(uint32) clsend ownrecv;
    teleportResponseToYard(uint32, uint32) clsend ownrecv;
    raceInviteRequest(int32 lobbyDoid, int32 contextDoid, int32 trackId, int32 fromDoid, int32 zoneId);
    gotoFriendsContext(int32 lobbyDoid, int32 zoneId);
    generateComplete();
    setDISLname(string) broadcast ram;
    setDISLid(uint32 = 0) required ownrequired broadcast db ownrecv;
    setAccess(uint8 = 2) ownrequired broadcast ownrecv ram;
    setActiveQuests(int32[] = []) ownrequired broadcast db ownrecv;
    setChoreography(AnimationChoreography[], Choreography[], Choreography[], Choreography[]) ownsend airecv;
    broadcastChoreography(AnimationChoreography[], Choreography[], Choreography[], Choreography[]) ownsend broadcast;
    setReward(Reward[]);
    updateYardPermissionMask(int32, int32) ownsend;
    sendEventLog(string, int32[], string[]) ownsend airecv;
    setChatLevel(uint8 = 0) required ownrequired broadcast db ownrecv;
    setMute(uint8 = 0) required ownrequired broadcast db ownrecv;
    setSubscriptionStatus(uint8 = 0) ownrequired broadcast db ownrecv;
    showDialogs(Dialog[]);
    setCargo(int32[] = []) required ownrequired broadcast db ownrecv;
    dropCargo(int32[]) ownsend;
    setAfk(int8 = 0) required ownrequired broadcast ownrecv ownsend;
    setVisible(int8 = 1, int8 = 1, int8 = 1, int8 = 0) required ownrequired broadcast db ownrecv; // 515
};

// struct 79
dclass DistributedCarGM : DistributedCarPlayer {
    // No ownrequireds needed
    banPlayer(uint32, int8) ownsend airecv; // 516
    kickPlayer(uint32, int8) ownsend airecv;
    warnPlayer(uint32, int8) ownsend airecv;
    whisperPlayer(uint32, int8) ownsend airecv;
};

// struct 80
dclass DistributedCarPuppet : DistributedCarGM {
    invokePeriodicRule(int32, int8, uint32, uint32) ownsend airecv; // 520
    setPuppetId(int32) required broadcast ownrequired ownrecv;
};

// struct 81
dclass GameMasterController {
    setMessage(string, uint32); // 522
    requestSendMessage(string, uint32, uint32, uint32) clsend airecv;
};

// struct 82
dclass DistributedZone {
    setParentingRules(string, string) broadcast ram; // 524
    setName(string) required broadcast;
    setMapId(int32) required broadcast;
    setCatalogItemId(int32) required broadcast;
    setInteractiveObjectCount(uint16) required broadcast;
    setPlayerCount(uint16) required broadcast;
    setMute(uint8) required broadcast;
    refreshInteractiveObjects(uint32[]) clsend;
    onClientEnter() clsend airecv; // 532
};

// struct 83
struct Command {
    uint8 action;
    int32 catalogId;
    uint8 type;
};

// struct 84
dclass InteractiveObject : DistributedCarAvatar {
    // field 536 (ok)
    setName(string) required broadcast;
    setAssetId(int32) required broadcast;
    setType(int8) required broadcast;
    setGlobalState(uint8) required broadcast;
    setPrivateState(uint8);
    setVisible(int8) required broadcast;
    setClientScript(string) required broadcast;
    setDialogTree(int32);
    addDialogTree(int32, int32, int16);
    removeDialogTree(int32, int32, int16);
    triggerInteraction(int16, uint32[]) clsend airecv;
    setInteractiveCommands(uint16, Command[]);
    broadcastInteractiveCommands(uint16, Command[]);
    setChoreography(AnimationChoreography[], Choreography[], Choreography[], Choreography[]);
    broadcastChoreography(AnimationChoreography[], Choreography[], Choreography[], Choreography[]) broadcast;
    playAnimations(int32[]);
};

// struct 85
dclass YardInteractiveObject : InteractiveObject {
    setCatalogItemId(int32) required; // 552
    setOffset(int32, int32) required;
};

// struct 86
dclass DistributedDungeon {
    setParentingRules(string, string) broadcast ram; // 554
    waitForObjects(uint32[]) required broadcast;
    setDungeonItemId(int32) required broadcast;
    setLobbyDoid(int32) required broadcast;
    setContextDoid(int32) required broadcast;
    syncReady() clsend airecv;
    setAiCommand(int32, int32[]) clsend airecv;
    setClientCommand(int32, int32[]);
    broadcastClientCommand(int32, int32[]);
    addHotspot(int32, int32, int32, int32);
    addHotspotByName(string, int32);
};

// struct 87
dclass DistributedRace : DistributedDungeon {
    setCountDown(int8) broadcast; // 565
    setPlaces(int32[] orderedPlayers) broadcast;
    onSegmentEnter(int16 segment, int16 fromSegment, int8 forward) clsend airecv;
    openSegment(int16);
    closeSegment(int16);
    gotoFrameInObject(string, string);
    setRacerResult(int32 doId, int8 place, int32 bestLapTime, int32 totalTime, int8 showPhotoFinish, int32 distanceFromFinish) broadcast;
};

// struct 88
dclass DistributedMPRace : DistributedRace {
    dropHazard(int32 x, int32 y, uint32 itemId) clsend airecv; // 572
    broadcastSpeed(int32 topSpeed, int32 averageSpeed) clsend airecv;
    setSpeeds(int32 playerId, int32 topSpeed, int32 averageSpeed) broadcast;
    startPhotoFinish() broadcast;
    gotoDungeon(int32 destinationShard, int32 destinationZone) broadcast;
    setRaceSummary() clsend airecv;
    setAvailable() clsend airecv;
    setReady() clsend airecv;
    setGearedUp() clsend airecv;
    setQuit() clsend airecv;
    setPlayersRacing(int32[] playerIds) broadcast;
    setPlayersRaceSummary(int32[] playerIds) broadcast;
    setPlayersAvailable(int32[] playerIds) broadcast;
    setPlayersReady(int32[] playerIds) broadcast;
    setPlayerQuit(int32 playerId) broadcast;
    setPlayerRaceSummary(int32 playerId) broadcast;
    setPlayerAvailable(int32 playerId) broadcast;
    setPlayerReady(int32 playerId) broadcast;
    startGearUp() broadcast;
    setGearUpTimeLeft(int8 timeLeft) broadcast;
    setTimeLeft(int8 timeLeft) broadcast;
};

// struct 89
dclass DistributedSPRace : DistributedRace {
    setOpponentNPCs(int32[] npcIds) clsend airecv; // 593
    onNpcSegmentEnter(int32 npcId, int16 segment, int16 fromSegment, int8 forward) clsend airecv;
};

// struct 90
dclass DistributedYard : DistributedDungeon {
    setOwner(uint32) required broadcast; // 595
    setItemPosition(int32, int32, int32) clsend;
    addItemRequest(int32, int32, int32, int32) clsend;
    addItemResponse(int8, int32);
    removeItemRequest(int32, int32) clsend;
    removeItemResponse(int8, int32);
};

// struct 91
dclass YardAgent {
    setParentingRules(string, string); // 601

    // unknown fields, might be in YardManager
    unk_602();
    unk_603();
    unk_604();
};

// struct 92
dclass YardManager {
    setYardCount(int16) required; // 605
    yardRequest(uint32) clsend;
    yardResponse(uint32, uint32);
    setYardPermissionMask(uint32, int16) clsend;
};

// struct 93
dclass DistributedYardItem {
    setItemId(int32) required; // 609
    setCatalogItemId(uint16) required;
    setPosition(int32, int32) required clsend;
};

// struct 94
struct HolidayEvent {
    string name;
    uint32 start;
    uint32 end;
};

// struct 95
dclass HolidayManager {
    // field 615 (ok)
    setHolidayEvents(HolidayEvent[]) broadcast required;

    // might contain more unknown fields
};

// struct 96
dclass AnalyticsAgent {
    // unknown fields
};
